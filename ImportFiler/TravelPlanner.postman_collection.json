{
	"info": {
		"_postman_id": "4dc40742-88bb-4da3-8251-9f9ef0c1dc49",
		"name": "TravelPlanner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26744065",
		"_collection_link": "https://universal-resonance-666434.postman.co/workspace/TravelPlanner~286f0a99-86fb-4013-8c52-09597075ed06/collection/26744065-4dc40742-88bb-4da3-8251-9f9ef0c1dc49?action=share&source=collection_link&creator=26744065"
	},
	"item": [
		{
			"name": "ManuellaTester",
			"item": [
				{
					"name": "1-GetStatusKod",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/api/transports",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"transports"
							]
						}
					},
					"response": []
				},
				{
					"name": "2-CheckJSonFormat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/api/attractions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"attractions"
							]
						}
					},
					"response": []
				},
				{
					"name": "3-InvalidRequest",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\" : \"Abeo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/api/attractions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"attractions"
							],
							"query": [
								{
									"key": "stad",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4-TestFilter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/api/transports?mode\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"transports"
							],
							"query": [
								{
									"key": "mode\n",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5-",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/api/transports?mode\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"transports"
							],
							"query": [
								{
									"key": "mode\n",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6-Specialcharacters",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/api/acçommodations?name=eşşra",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"acçommodations"
							],
							"query": [
								{
									"key": "name",
									"value": "eşşra"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7-ConcurrentRequests",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/api/attractions?city\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"api",
								"attractions"
							],
							"query": [
								{
									"key": "city\n",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OtomatiseraTester",
			"item": [
				{
					"name": "8-EndpointsValidation",
					"item": [
						{
							"name": "Transport",
							"item": [
								{
									"name": "GetTransport",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET request: Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"GET request: Response includes expected data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('transports').that.is.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/api/transports",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"transports"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const updatedTransport = {\r",
													"    \"_id\": \"66283038139b557e9f8652e6\", \r",
													"    \"mode\": \"Bus\" \r",
													"};\r",
													"pm.sendRequest({\r",
													"    url: 'http://localhost:3000/api/transports/' + updatedTransport._id,\r",
													"    method: 'PUT',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"mode\": \"Bus\"\r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    \r",
													"    pm.test(\"PUT /api/transports returns 200 OK\", function () {\r",
													"        pm.expect(response).to.have.status(200); \r",
													"    });\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"mode\": \"Bus\",\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/api/transports/66283038139b557e9f8652e6\n",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"transports",
												"66283038139b557e9f8652e6\n"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const newTransport = {\r",
													"    \"mode\": \"Bus\",\r",
													"    \"description\": \"Initial description\"\r",
													"};\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: 'http://localhost:3000/api/transports',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(newTransport)\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    pm.test(\"POST /api/transports returns 201 Created\", function () {\r",
													"        pm.expect(response).to.have.status(201);\r",
													"    });\r",
													"\r",
													"    const createdTransport = response.json();\r",
													"    console.log(\"Created Transport ID:\", createdTransport._id); // Yeni verinin _id'sini alın\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"mode\": \"Bus\",\r\n     \"description\": \"Initial description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/api/transports",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"transports"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'http://localhost:3000/api/transports/66819cf3f26eaafa0cabe4fb', // Write the _id of the record to be deleted here\r",
													"    method: 'DELETE'\r",
													"}, function (err, response) {\r",
													"    \r",
													"    pm.test(\"DELETE /api/transports returns 200 or 204\", function () {\r",
													"        pm.expect(response.code).to.be.oneOf([200, 204]);\r",
													"    });\r",
													"\r",
													"    // Check Json format\r",
													"    if (response.code === 200) {\r",
													"        pm.test(\"Response has JSON Content-Type\", function () {\r",
													"            pm.expect(response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"Response is an Object\", function () {\r",
													"            pm.expect(response.json()).to.be.an(\"object\");\r",
													"        });\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/api/transports/66819cf3f26eaafa0cabe4fb",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"transports",
												"66819cf3f26eaafa0cabe4fb"
											]
										}
									},
									"response": []
								},
								{
									"name": "CheckDeleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'http://localhost:3000/api/transports/66819cf3f26eaafa0cabe4fb', \r",
													"    method: 'GET'\r",
													"}, function (err, response) {\r",
													"    pm.test(\"GET /api/transports returns 404 Not Found after DELETE\", function () {\r",
													"        pm.expect(response).to.have.status(404); \r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/api/transports/66819cf3f26eaafa0cabe4fb",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"transports",
												"66819cf3f26eaafa0cabe4fb"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "9-TestforTransportRecord",
					"item": [
						{
							"name": "TransportData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: 'http://localhost:3000/api/transports',\r",
											"    method: 'GET'\r",
											"}, function (err, response) {\r",
											"    pm.test(\"GET /api/transports returns 200 OK\", function () {\r",
											"        pm.expect(response).to.have.status(200);\r",
											"        pm.expect(response).to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains transport data\", function () {\r",
											"        const jsonData = response.json();\r",
											"        pm.expect(jsonData.transports).to.be.an('array');\r",
											"        pm.expect(jsonData.transports).to.have.lengthOf.at.least(1);\r",
											"       \r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/transports",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"transports"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateTransport",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Step 1: Get Record and Store in Variables\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:3000/api/transports',\r",
											"    method: 'GET'\r",
											"}, function (err, response) {\r",
											"    pm.test(\"GET /api/transports returns 200 OK\", function () {\r",
											"        pm.expect(response).to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains transport data\", function () {\r",
											"        const transports = response.json().transports;\r",
											"        pm.expect(transports).to.be.an('array').that.is.not.empty;\r",
											"    });\r",
											"\r",
											"    // Store the first transport data retrieved for use in the update step\r",
											"    pm.variables.set('initialTransport', response.json().transports[0]);\r",
											"\r",
											"    // Step 2: Update the Record\r",
											"    const initialTransport = pm.variables.get('initialTransport');\r",
											"\r",
											"    const updatedTransport = {\r",
											"        \"_id\": initialTransport._id,\r",
											"        \"mode\": \"Train\",\r",
											"        \"description\": \"Updated description\"\r",
											"    };\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: 'http://localhost:3000/api/transports/' + updatedTransport._id,\r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(updatedTransport)\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        pm.test(\"PUT /api/transports returns 200 OK\", function () {\r",
											"            pm.expect(response).to.have.status(200);\r",
											"        });\r",
											"\r",
											"        // Step 3: Check the Updated Record\r",
											"        pm.sendRequest({\r",
											"            url: 'http://localhost:3000/api/transports/' + updatedTransport._id,\r",
											"            method: 'GET'\r",
											"        }, function (err, response) {\r",
											"            pm.test(\"GET /api/transports/:id returns 200 OK\", function () {\r",
											"                pm.expect(response).to.have.status(200);\r",
											"            });\r",
											"\r",
											"            pm.test(\"Updated transport data reflects changes\", function () {\r",
											"                const updatedData = response.json();\r",
											"                pm.expect(updatedData).to.have.property('_id', updatedTransport._id);\r",
											"                pm.expect(updatedData).to.include({\r",
											"                    \"mode\": \"Train\",\r",
											"                    \"description\": \"Updated description\"\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/transports",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"transports"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1-Get-StatusKod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transports",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transports"
							]
						}
					},
					"response": []
				},
				{
					"name": "2-VerifyJsonFormat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response format should be JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/accommodations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"accommodations"
							]
						}
					},
					"response": []
				},
				{
					"name": "3-InvalidRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should have status code 400 for invalid request\", function () {\r",
									"    pm.response.to.have.status(400); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/attractions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"attractions"
							]
						}
					},
					"response": []
				},
				{
					"name": "4-TestFilter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response contains correct data for specific filters\", function () {\r",
									"    // Response body as JSON object\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Check if the response contains the expected properties\r",
									"    pm.expect(jsonData).to.have.property(\"totalPages\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalTransports\");\r",
									"\r",
									"    // Iterate through the transports array and check if each transport meets the filter criteria\r",
									"    jsonData.transports.forEach(function (transport) {\r",
									"        pm.expect(transport.mode).to.equal(pm.environment.get(\"tramway\"));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transports?mode=tramway\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transports"
							],
							"query": [
								{
									"key": "mode",
									"value": "tramway\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5-SpecificFilter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the page and limit parameters\r",
									"const page = 1;\r",
									"const limit = 10;\r",
									"\r",
									"// Send a GET request to the API with pagination parameters\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:3000/api/attractions?page=' + page + '&limit=' + limit,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    // Ensure the request was successful\r",
									"    pm.expect(res).to.have.status(200);\r",
									"\r",
									"    // Parse the response body as JSON\r",
									"    const responseBody = res.json();\r",
									"\r",
									"    // Verify the response contains pagination information\r",
									"    pm.test(\"Verify API returns paginated results\", function () {\r",
									"        pm.expect(responseBody).to.have.property(\"attractions\").that.is.an('array');\r",
									"        pm.expect(responseBody).to.have.property(\"totalPages\").that.is.a('number');\r",
									"        pm.expect(responseBody).to.have.property(\"totalAttractions\").that.is.a('number');\r",
									"    });\r",
									"\r",
									"    // Verify the correct number of items in the current page\r",
									"    pm.test(\"Verify the correct number of items per page\", function () {\r",
									"        pm.expect(responseBody.attractions.length).to.be.at.most(limit); // Should be less than or equal to limit\r",
									"    });\r",
									"\r",
									"    // Optional: Check some specific attributes of the paginated data\r",
									"    pm.test(\"Verify the first item has expected structure\", function () {\r",
									"        if (responseBody.attractions.length > 0) {\r",
									"            const firstItem = responseBody.attractions[0];\r",
									"            pm.expect(firstItem).to.have.property('_id');\r",
									"            pm.expect(firstItem).to.have.property('name');\r",
									"            // Add more properties to check as needed\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/attractions?category?page=1&limit=10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"attractions"
							],
							"query": [
								{
									"key": "category?page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6-Specialcharacters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure 'city' field does not contain special characters\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('attractions');\r",
									"    pm.expect(responseBody.attractions).to.be.an('array');\r",
									"\r",
									"    const specialCharacterPattern = /[!@#$%^&*(),?\":{}|<>]/;\r",
									"\r",
									"    responseBody.attractions.forEach(record => {\r",
									"        pm.expect(record).to.have.property('city');\r",
									"        pm.expect(record.city).to.be.a('string');\r",
									"        pm.expect(record.city).not.to.match(specialCharacterPattern);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/attractions?city=Antalya",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"attractions"
							],
							"query": [
								{
									"key": "city",
									"value": "Antalya"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7-ConcurrentRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Paralel olarak isteklerin gönderilmesi\r",
									"const promises = [];\r",
									"for (let i = 0; i < 5; i++) {\r",
									"    const requestPromise = new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:3000/api/attractions?city=Waltonstead',\r",
									"            method: 'GET'\r",
									"        }, function (err, response) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                resolve(response);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"    promises.push(requestPromise);\r",
									"}\r",
									"\r",
									"// Tüm isteklerin sonuçlarının test edilmesi\r",
									"Promise.all(promises)\r",
									"    .then(responses => {\r",
									"        responses.forEach(response => {\r",
									"            pm.test(\"Status code is 200\", function () {\r",
									"                pm.expect(response).to.have.status(200);\r",
									"            });\r",
									"            \r",
									"            pm.test(\"Response includes expected data\", function () {\r",
									"                const jsonData = response.json();\r",
									"                pm.expect(jsonData).to.have.property('attractions').that.is.an('array');\r",
									"                pm.expect(jsonData.attractions).to.have.lengthOf.at.least(1);\r",
									"                pm.expect(jsonData.attractions[0]).to.have.property('city').that.includes('Waltonstead');\r",
									"            });\r",
									"        });\r",
									"    })\r",
									"    .catch(error => {\r",
									"        console.error('Error:', error);\r",
									"        throw new Error(`Test failed due to error: ${error}`);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/attractions?city=Waltonstead\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"attractions"
							],
							"query": [
								{
									"key": "city",
									"value": "Waltonstead\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "13-RateLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Rate limit test\r",
									"pm.test(\"Rate limit test\", function () {\r",
									"    for (let i = 0; i < 101; i++) { // Send 101 requests\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:3000/api/cuisines', \r",
									"            method: 'GET',\r",
									"           \r",
									"        }, function (err, response) {\r",
									"            if (err) {\r",
									"                console.error('Error:', err);\r",
									"                return;\r",
									"            }\r",
									"\r",
									"            // Check that a status code 429 is returned when the limit is exceeded\r",
									"            if (i < 100) {\r",
									"                pm.response.to.have.status(200); // Expect a successful status for the first 100 requests\r",
									"            } else {\r",
									"                pm.response.to.have.status(429); // Expect status code 429 for the 101st request\r",
									"                pm.expect(response.json().message).to.eql(\"Too many request from this IP, please try again in an 15 minutes.\"); // Check the error message\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/cuisines",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"cuisines"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3002/",
			"type": "string"
		}
	]
}